diff --git a/Dockerfile~ b/Dockerfile~
new file mode 100644
index 0000000..cdc260b
--- /dev/null
+++ b/Dockerfile~
@@ -0,0 +1,24 @@
+FROM golang:1.22.10 AS builder
+
+WORKDIR /build
+
+COPY go.mod go.sum ./
+
+RUN go mod download
+
+
+RUN go install github.com/swaggo/swag/cmd/swag@v1.16.3
+
+COPY . .
+
+RUN swag init --parseDependency --parseInternal -g ./internal/http/handlers/router.go
+
+
+RUN CGO_ENABLED=0 GOOS=linux go build -o /main cmd/main.go
+
+
+FROM alpine AS runner
+
+COPY --from=builder main /bin/main
+
+ENTRYPOINT ["/bin/main"]
diff --git a/Makefile b/Makefile
index b84d12f..4368e11 100644
--- a/Makefile
+++ b/Makefile
@@ -4,7 +4,6 @@ BIN=bin
 
 export GOBIN=$(CURDIR)/$(BIN)# for windows
 
-#export GOBIN=$(PWD)/$(BIN) # for unix
 
 $(BIN)/golangci-lint:
 	go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.63.4
diff --git a/internal/repo/repo.go b/internal/repo/repo.go
index 498d4c9..defa61d 100644
--- a/internal/repo/repo.go
+++ b/internal/repo/repo.go
@@ -145,13 +145,6 @@ func (sr *ScheduleRepo) GetGroups(facultyName string, course int) (*models.Cours
 		}}},
 	}
 
-	stageFacultyCourse := append(mongo.Pipeline{
-		bson.D{{Key: "$match", Value: bson.D{
-			{Key: "faculty", Value: facultyName},
-			{Key: "course", Value: course},
-		}}},
-	}, stageBase...)
-
 	stageFaculty := append(mongo.Pipeline{
 		bson.D{{Key: "$match", Value: bson.D{
 			{Key: "faculty", Value: facultyName},
@@ -162,8 +155,6 @@ func (sr *ScheduleRepo) GetGroups(facultyName string, course int) (*models.Cours
 
 	if facultyName == "" || course == 0 {
 		switch {
-		case facultyName != "" && course != 0:
-			stage = stageFacultyCourse
 		case facultyName != "":
 			stage = stageFaculty
 		default:
diff --git a/internal/repo/repo_test.go b/internal/repo/repo_test.go
index 0ea5141..3dd4a3b 100644
--- a/internal/repo/repo_test.go
+++ b/internal/repo/repo_test.go
@@ -56,7 +56,6 @@ func createMongoContainer(ctx context.Context) (testcontainers.Container, *mongo
 			Image:        "mongo:6.0.9",
 			ExposedPorts: []string{port},
 			Env:          env,
-			//WaitingFor:   wait.Strategy(wait.ForLog("Waiting for connections")),
 		},
 		Started: true,
 	}
@@ -626,14 +625,12 @@ func (suite *RepositorySuite) TestGetScheduleByGroup() {
 			Collection(repo.ScheduleCollectionName).
 			Drop(context.Background()))
 	}()
-	suite.Run("when id is not provided", func() {
-		suite.Equal(result.InsertedID, data["_id"])
+	suite.Equal(result.InsertedID, data["_id"])
 
-		createdSchedule, err := suite.repository.GetScheduleByGroup("344")
+	createdSchedule, err := suite.repository.GetScheduleByGroup("344")
 
-		suite.Require().NoError(err)
-		suite.Equal("344", createdSchedule.Group)
-	})
+	suite.Require().NoError(err)
+	suite.Equal("344", createdSchedule.Group)
 }
 
 func (suite *RepositorySuite) TestGetGroups() {
@@ -658,35 +655,34 @@ func (suite *RepositorySuite) TestGetGroups() {
 	err := json.Unmarshal([]byte(testGroupDocs), &data)
 	suite.Require().NoError(err)
 
-	suite.Run("when id is not provided", func() {
-		result, err := suite.
-			testDatabase.
+	result, err := suite.
+		testDatabase.
+		DbInstance.
+		Collection(repo.ScheduleCollectionName).
+		InsertMany(context.Background(), data)
+	suite.Require().NoError(err)
+	defer func() {
+		suite.Require().NoError(suite.testDatabase.
 			DbInstance.
 			Collection(repo.ScheduleCollectionName).
-			InsertMany(context.Background(), data)
-		suite.Require().NoError(err)
-		defer func() {
-			suite.Require().NoError(suite.testDatabase.
-				DbInstance.
-				Collection(repo.ScheduleCollectionName).
-				Drop(context.Background()))
-		}()
-
-		suite.Len(result.InsertedIDs, 3)
-
-		groups, err := suite.repository.GetGroups("фвт", 3)
-		suite.Require().NoError(err)
-
-		suite.Len(groups.Groups, 2)
-
-		groups, err = suite.repository.GetGroups("фэ", 0)
-		suite.Require().NoError(err)
-		suite.Len(groups.Groups, 1)
-
-		groups, err = suite.repository.GetGroups("", 0)
-		suite.Require().NoError(err)
-		suite.Len(groups.Groups, 3)
-	})
+			Drop(context.Background()))
+	}()
+
+	suite.Len(result.InsertedIDs, 3)
+
+	groups, err := suite.repository.GetGroups("фвт", 3)
+	suite.Require().NoError(err)
+
+	suite.Len(groups.Groups, 2)
+
+	groups, err = suite.repository.GetGroups("фэ", 0)
+	suite.Require().NoError(err)
+	suite.Len(groups.Groups, 1)
+
+	groups, err = suite.repository.GetGroups("", 0)
+	suite.Require().NoError(err)
+	suite.Len(groups.Groups, 3)
+
 }
 
 func (suite *RepositorySuite) TestGetFaculties() {
@@ -711,27 +707,26 @@ func (suite *RepositorySuite) TestGetFaculties() {
 	err := json.Unmarshal([]byte(testGroupDocs), &data)
 	suite.Require().NoError(err)
 
-	suite.Run("when id is not provided", func() {
-		result, err := suite.
-			testDatabase.
+	result, err := suite.
+		testDatabase.
+		DbInstance.
+		Collection(repo.ScheduleCollectionName).
+		InsertMany(context.Background(), data)
+	suite.Require().NoError(err)
+	defer func() {
+		suite.Require().NoError(suite.testDatabase.
 			DbInstance.
 			Collection(repo.ScheduleCollectionName).
-			InsertMany(context.Background(), data)
-		suite.Require().NoError(err)
-		defer func() {
-			suite.Require().NoError(suite.testDatabase.
-				DbInstance.
-				Collection(repo.ScheduleCollectionName).
-				Drop(context.Background()))
-		}()
-
-		suite.Len(result.InsertedIDs, 3)
-
-		faculties, err := suite.repository.GetFaculties()
-		suite.Require().NoError(err)
-
-		suite.Len(faculties.Faculties, 2)
-	})
+			Drop(context.Background()))
+	}()
+
+	suite.Len(result.InsertedIDs, 3)
+
+	faculties, err := suite.repository.GetFaculties()
+	suite.Require().NoError(err)
+
+	suite.Len(faculties.Faculties, 2)
+
 }
 func (suite *RepositorySuite) TestGetCourseFaculties() {
 	const testGroupDocs = `
@@ -769,21 +764,19 @@ func (suite *RepositorySuite) TestGetCourseFaculties() {
 			Drop(context.Background()))
 	}()
 
-	suite.Run("when id is not provided", func() {
-		courseFaculties, err := suite.repository.GetCourseFaculties(3)
-		suite.Require().NoError(err)
+	courseFaculties, err := suite.repository.GetCourseFaculties(3)
+	suite.Require().NoError(err)
 
-		suite.Len(courseFaculties.Faculties, 1)
+	suite.Len(courseFaculties.Faculties, 1)
 
-		courseFaculties, err = suite.repository.GetCourseFaculties(4)
-		suite.Require().NoError(err)
+	courseFaculties, err = suite.repository.GetCourseFaculties(4)
+	suite.Require().NoError(err)
 
-		suite.Len(courseFaculties.Faculties, 1)
+	suite.Len(courseFaculties.Faculties, 1)
 
-		courseFaculties, err = suite.repository.GetCourseFaculties(1)
-		suite.Nil(courseFaculties)
-		suite.Require().Equal(err, repo.ErrNoResults)
-	})
+	courseFaculties, err = suite.repository.GetCourseFaculties(1)
+	suite.Nil(courseFaculties)
+	suite.Require().Equal(err, repo.ErrNoResults)
 }
 
 func (suite *RepositorySuite) TestGetFacultyCourses() {
@@ -831,6 +824,52 @@ func (suite *RepositorySuite) TestGetFacultyCourses() {
 	suite.Require().Equal(err, repo.ErrNoResults)
 }
 
+func (suite *RepositorySuite) TestGetCourseFacultyGroups() {
+	const testGroupDocs = `
+	[
+		{	  "group": "23434",
+			  "course": 3,
+			  "faculty": "фвт"
+		},
+		{	  "group": "345",
+			  "course": 3,
+			  "faculty": "фвт"
+		},
+		{	  "group": "016",
+			  "course": 4,
+			  "faculty": "фэ"
+		}
+	]
+	`
+	var data []interface{}
+
+	err := json.Unmarshal([]byte(testGroupDocs), &data)
+	suite.Require().NoError(err)
+
+	result, err := suite.
+		testDatabase.
+		DbInstance.
+		Collection(repo.ScheduleCollectionName).
+		InsertMany(context.Background(), data)
+	suite.Require().NoError(err)
+	defer func() {
+		suite.Require().NoError(suite.testDatabase.
+			DbInstance.
+			Collection(repo.ScheduleCollectionName).
+			Drop(context.Background()))
+	}()
+	suite.Len(result.InsertedIDs, 3)
+
+	courseGroups, err := suite.repository.GetCourseFacultyGroups("фвт", 3)
+	suite.Require().NoError(err)
+	suite.Len(courseGroups.Groups, 2)
+
+	courseGroups, err = suite.repository.GetCourseFacultyGroups("фвт", 4)
+	suite.Nil(courseGroups)
+	suite.Require().Equal(err, repo.ErrNoResults)
+
+}
+
 func TestRepoSuite(t *testing.T) {
 	suite.Run(t, new(RepositorySuite))
 }
<<<<<<<<<<<<<<  ✨ Codeium Command ⭐ >>>>>>>>>>>>>>>>


<<<<<<<  caa64f17-eb1b-478d-bafd-00afe433e164  >>>>>>>

